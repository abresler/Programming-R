fromuser,
fakeid,
nickname,
sex,
create_time,
msgtime,
msg_type,
type_detail,
msg_id,
content,
pic_url,
location_x,
location_y,
scale,
label,
title,
description,
url,
event,
event_key
FROM
message
')
library(RODBC)
conn <- odbcConnect('mysql_data')
messagedata <- sqlQuery(conn,'SELECT   id,
userid,
touser,
fromuser,
fakeid,
nickname,
sex,
create_time,
msgtime,
msg_type,
type_detail,
msg_id,
content,
pic_url,
location_x,
location_y,
scale,
label,
title,
description,
url,
event,
event_key
FROM
message
')
head(messagedata)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
create_time,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
msg_id,
content,
pic_url,
location_x,
location_y,
scale,
label,
title,
description,
url,
event,
event_key
FROM
message ')
head(messagedata)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !='' ')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' ')
head(messagedata)
？sqlquery
?sqlquery
?sqlQuery
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
SET NAMES utf8
options(encoding='UTF-8')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
sessionInfo()
?locale
?locales
l10n_info()
Sys.getlocale
Sys.setlocale("LC_TIME", "zh_CN.utf8")
Sys.setlocale("LC_ALL", "zh_CN.utf8")
Sys.setlocale("LC_ALL", "zh_CN.UTF-8")
l10n_info()
options(encoding=“UTF-8”)
options(encoding='UTF-8')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
l10n_info()
Sys.getlocale()
Sys.setlocale()
LC_CTYPE
?LC_CTYPE
?dbConnect
?dbConnect()
install.packages(RMysql)
install.packages(RMySql)
install.packages(RMySQL)
dbSendQuery(con,'SET NAMES utf8')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
sqlQuery
?sqlQuery
Setting LC_CTYPE=ZH_CN
Chinese_People's Republic of China.936
;
；
wee
quit
;
；
;
？
?
session
()
z
z
z
z
library(RODBC)
conn <- odbcConnect('mysql_data')
?odbcConnect
library(RODBC)
conn <- odbcConnect('mysql_data',DBMSencoding='UTF-8')
library("rstudio", lib.loc="D:/DEV/DEV_Tools/R-3.0.1/library")
library(RODBC)
conn <- odbcConnect('mysql_data')
library(RODBC)
conn <- odbcConnect('mysql_data')
library(RODBC)
conn <- odbcConnect('mysql_data')
getOption('encoding')
sessionInfo()
LC_COLLATE
?LC_COLLATE
Sys.getlocale(category = "LC_ALL")
Sys.setlocale("LC_TIME", "en_US.utf8")
library(RODBC)
conn <- odbcConnect('mysql_data')
library(RODBC)
conn <- odbcConnect('mysql_data')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail,
content,
event
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS DATE, HOUR(msgtime) AS HOUR,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
library(ggplot2)
userbase <- 506
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' limit 1000 ')
head(messagedata)
qplot2(hour,date,data=messagedata,colors=type_detail)
qplot(hour,date,data=messagedata,colors=type_detail)
qplot(hour,date,data=messagedata)
qplot(hour,date,data=messagedata)
table(messagedata$hour,messagedata$date,messagedata$type_detail)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' ')
head(messagedata)
qplot(hour,date,data=messagedata)
table(messagedata$hour,messagedata$date,messagedata$type_detail)
library(ggplot2)
mtcars$cylinder <- as.factor(mtcars$cyl)
qplot(cylinder, mpg, data=mtcars, geom=c("boxplot", "jitter"),
fill=cylinder,
main="Box plots with superimposed data points",
xlab= "Number of Cylinders",
ylab="Miles per Gallon")
qplot(hour,date,data=messagedata)
table(messagedata$date,messagedata$hour，messagedata$type_detail)
qplot(data,hour,data=messagedata)
table(messagedata$date,messagedata$hour,messagedata$type_detail)
qplot(data,hour,data=messagedata)
qplot(date,hour,data=messagedata)
qplot(date,hour,data=messagedata,colour=type_detail)
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.2)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE  DATE(msgtime) =\'2013-09-27\' ')
head(messagedata)
qplot(type_detail,hour,data=messagedata,colour=type_detail,alpha = 0.2)
qplot(type_detail,hour,data=messagedata,colour=type_detail,alpha = 0.2,geom='jitter')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' ')
head(messagedata)
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.2,geom='jitter'))
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.2,geom='jitter'))
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.2,geom='jitter')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' and type =1 ')
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.2,geom='jitter')
head(messagedata)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' and msg_type =1 ')
head(messagedata)
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.2,geom='jitter')
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.01,geom='jitter')
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
msg_type,
type_detail
FROM
test.message WHERE msgtime !=\'\' and msg_type =1
and type_detail =\'compute\' or  type_detail =\'query\'
')
head(messagedata)
messagedata <- sqlQuery(conn,'
SELECT   id,
userid,
sex,
DATE(msgtime) AS date, HOUR(msgtime) AS hour,
type_detail
FROM
test.message WHERE msgtime !=\'\' and msg_type =1
and type_detail =\'compute\' or  type_detail =\'query\'
')
head(messagedata)
qplot(date,hour,data=messagedata,colour=type_detail,alpha = 0.01,geom='jitter')
set.seed(1410) # Make the sample reproducible
dsmall <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data = diamonds)
qplot(carat, x * y * z, data = diamonds)
qplot(carat, price, data = dsmall, colour = color)
qplot(carat, price, data = dsmall, shape = cut)
qplot(carat, price, data = diamonds, alpha = I(1/200))
qplot(color, data = diamonds, geom = "bar")
qplot(color, data = diamonds, geom = "bar", weight = carat) +
scale_y_continuous("carat")
qplot(carat, data = diamonds, facets = color ~ .,
geom = "histogram", binwidth = 0.1, xlim = c(0, 3))
qplot(carat, ..density.., data = diamonds, facets = color ~ .,
geom = "histogram", binwidth = 0.1, xlim = c(0, 3))
qplot(displ, hwy, data = mpg, colour = factor(cyl))
qplot(date,hour,data=messagedata,colour=factor(type_detail),alpha = 0.01,geom='jitter')
p <- ggplot(diamonds, aes(carat, price, colour = cut))
p <- p + layer(geom = "point")
p <- ggplot(diamonds, aes(carat, price, colour = cut))
p <- p + layer(geom = "point")
p
p <- ggplot(diamonds, aes(x = carat))
p <- p + layer(
geom = "bar",
geom_params = list(fill = "steelblue"),
stat = "bin",
stat_params = list(binwidth = 2)
)
p
p <- ggplot(Oxboys, aes(age, height, group = Subject)) +
geom_line()
p <- ggplot(Oxboys, aes(age, height, group = Subject)) +
geom_line()
install.packages('nlmn')
install.packages('nlme')
p <- ggplot(Oxboys, aes(age, height, group = Subject)) +
geom_line()
library('nlme')
p <- ggplot(Oxboys, aes(age, height, group = Subject)) +
geom_line()
p
boysbox <- ggplot(Oxboys, aes(Occasion, height)) + geom_boxplot()
boysbox
boysbox + geom_line(aes(group = Subject), colour = "#3366FF")
df <- data.frame(
x = c(3, 1, 5),
y = c(2, 4, 6),
label = c("a","b","c")
)
df
p <- ggplot(df, aes(x, y, label = label)) +
xlab(NULL) + ylab(NULL)
p + geom_point() + opts(title = "geom_point")
p + geom_polygon() + opts(title = "geom_polygon")
qplot(depth, data=diamonds, geom="histogram")
qplot(depth, data=diamonds, geom="histogram", xlim=c(55, 70), binwidth=0.1)
depth_dist <- ggplot(diamonds, aes(depth)) + xlim(58, 68)
depth_dist +
geom_histogram(aes(y = ..density..), binwidth = 0.1) +
facet_grid(cut ~ .)
depth_dist + geom_histogram(aes(fill = cut), binwidth = 0.1,
position = "fill")
depth_dist + geom_freqpoly(aes(y = ..density.., colour = cut),
binwidth = 0.1)
install.packages('openair')
library('openair')
head(airquality)
head(melt(airquality, id=c("month", "day")))
library(reshape2)
head(melt(airquality, id=c("month", "day")))
?melt
install.packages('DMwR')
library(DMwR)
head(algae)
data(algae)
algae <- algae[-manyNAs(algae), ]
clean.algae <- knnImputation(algae, k = 10)
clean.algae
knnImputation
algae
dim(clean.algae )
lm.a1 <- lm(a1 ~ .,data=clean.algae[,1:12])
summary(lm.a1)
head(clean.algae)
anova(lm.a1)
lm2.a1 <- update(lm.a1, . ~ . - season)
summary(lm2.a1)
anova(lm.a1,lm2.a1)
final.lm <- step(lm.a1)
summary(final.lm)
library(rpart)
data(algae)
algae <- algae[-manyNAs(algae), ]
rt.a1 <- rpart(a1 ~ .,data=algae[,1:12])
rt.a1
prettyTree(rt.a1)
lm.predictions.a1 <- predict(final.lm,clean.algae)
rt.predictions.a1 <- predict(rt.a1,algae)
old.par <- par(no.readonly = TRUE)
par(mfrow=c(1,2))
plot(lm.predictions.a1,algae[,'a1'],main="Linear Model",
xlab="Predictions",ylab="True Values")
abline(0,1,lty=2)
plot(rt.predictions.a1,algae[,'a1'],main="Regression Tree",
xlab="Predictions",ylab="True Values")
abline(0,1,lty=2)
set.seed(1234)
library(nnet)
norm.data <- scale(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC) + myADX(GSPC) +    myEMV(GSPC) + myVolat(GSPC)  + myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)) )
library(DMwR)
data(GSPC)
library(randomForest)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC)  + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC)  + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
set.seed(1234)
rf <- buildModel(data.model,method='randomForest',
training.per=c(start(GSPC),index(GSPC["1999-12-31"])),
ntree=50, importance=T)
install.packages(randomForest)
1+2
dnorm(0)
summary(lm(dist ~ speed, data = cars))  # 一个回归
1 + 2
dnorm(0) # 标准正态分布在0处的密度值
summary(lm(dist ~ speed, data=cars)) # 一个回归
hello, the value of 2 * pi is <!--rinline 2*pi -->
<!--begin.rcode foo-label
rnorm(5)
end.rcode-->
1+2
installed.packages('LaTeX')
install.packages('pdfLaTeX')
Sys.which("pdflatex")
install.packages("knitr")
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **MD** toolbar button for help on Markdown).
version
install.packages(c("colorspace", "forecast"))
install.packages(c("colorspace", "forecast"))
install.packages(c("colorspace", "forecast"))
install.packages(c("colorspace", "forecast"))
install.packages(c("colorspace", "forecast"))
